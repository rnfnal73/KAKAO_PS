def solution(board, moves):
    stack = []
    tmp = -1
    row = len(board)
    count = 0
    for column in moves:
        for i in range(row):
            if board[i][column-1] != 0:
                tmp = board[i][column-1]
                #스택이 비어있으면
                if not stack:
                    stack.append(tmp)
                else:
                    if stack[-1] != 0 and stack[-1] == tmp:
                        count += 1
                        stack.pop()
                    else:
                        stack.append(tmp)
                board[i][column-1] = 0
                break
            else:
                continue
    return count*2





######### 새로 풀이
from collections import deque
def solution(board, moves):
    moves = deque(moves)
    stack,size,count = [],len(board),0
    while moves:
        poped = moves.popleft()-1
        poped_value = 0
        for i in range(size):
            if board[i][poped]:
                board[i][poped], poped_value = 0, board[i][poped]
                break
        if stack and poped_value==stack[-1]:
            stack.pop()
            count+=1
        else:
            if poped_value:
                stack.append(poped_value)
    return count*2
