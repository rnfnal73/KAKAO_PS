from collections import Counter
def solution(n, stages):
    stages = Counter(stages)
    number_set = sorted(list(set(stages)))
    number_people = [stages[i] for i in number_set]
    result = []
    for x in range(1,n):
        if x not in number_set:
            result.append([0,x])
        else:
            result.append([number_people[number_set.index(x)]/sum(number_people[number_set.index(x):]),x])
    if n in number_set:
        if n+1 in number_set:
            result.append([number_people[len(number_set) - 2]/(number_people[len(number_set) - 2]+number_people[len(number_set) - 1]), int(n)])
        else:
            result.append([1,n])
    else:
        result.append([0,n])
    result.sort(key = lambda x : x[1])
    result.sort(key = lambda x : x[0],reverse = True)
    return [x[1] for x in result]
    
    
    
 ################# 다시 풀이
 from collections import Counter
def solution(n, stages):
    players_on_stage = [[i,stages.count(i)] for i in range(1,n+2)]
    _sum = sum([x[1] for x in players_on_stage])
    failure = []
    cur_sum = 0
    for stage in players_on_stage:
        try:
            if stage[0] <n+1:
                failure.append([stage[0],float(stage[1])/float(_sum-cur_sum)])
                cur_sum += stage[1]
        except:
            failure.append([stage[0],0.0])
            continue
    return [x[0] for x in sorted(failure,key=lambda x:x[1],reverse=True)]
