def divide(str, n):
    result = []
    q, r = divmod(len(str), n)
    for i in range(q):
        result.append(str[i * n:(i + 1) * n])
    if r != 0:
        result.append(str[q * n:])
    return result


def compress(item):
    count = 0
    rtn_str = ""
    previous_str = item[0]
    while True:
        #print(rtn_str)
        tmp = item.pop(0)
        if tmp == previous_str:
            count += 1
        else:
            if count != 1:
                rtn_str += str(count) + previous_str
            elif count == 1:
                rtn_str += previous_str
            count = 1
            previous_str = tmp
        if len(item) == 0:
            if count == 1:
                rtn_str += tmp
            else:
                rtn_str += str(count) + previous_str
            break
    return rtn_str
def solution(str):
    if len(str) == 1:
        return 1
    result = []
    max_compression = len(str) // 2
    divided = [divide(str, i) for i in range(1, max_compression + 1)]
    for x in divided:
        result.append(compress(x))
    return min(list(map(lambda x : len(x), result)))
